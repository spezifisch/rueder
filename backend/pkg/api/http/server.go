package http

import (
	"time"

	"github.com/apex/log"
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "github.com/spezifisch/rueder3/backend/docs" // api docs generated by Swag CLI
	"github.com/spezifisch/rueder3/backend/internal/common"
	"github.com/spezifisch/rueder3/backend/pkg/api/controller"
)

// Server is a http server
type Server struct {
	Bind string

	engine            *gin.Engine
	controller        *controller.Controller
	jwtSecretKey      string
	isDevelopmentMode bool
	trustedProxies    []string
}

// NewServer creates a default http backend
func NewServer(controller *controller.Controller, jwtSecretKey string, isDevelopmentMode bool, trustedProxies []string) *Server {
	s := &Server{
		Bind:              ":8080",
		controller:        controller,
		jwtSecretKey:      jwtSecretKey,
		isDevelopmentMode: isDevelopmentMode,
		trustedProxies:    trustedProxies,
	}
	s.init()
	return s
}

func (s *Server) init() {
	if !s.isDevelopmentMode {
		gin.SetMode("release")
	}

	s.engine = gin.Default()
	common.GinSetTrustedProxies(s.engine, s.trustedProxies)

	if s.isDevelopmentMode {
		// swagger is enabled by default in dev mode, though it can be disabled by setting env variable DISABLE_SWAGGER=1
		s.engine.GET("/swagger/*any", ginSwagger.DisablingWrapHandler(swaggerFiles.Handler, "DISABLE_SWAGGER"))

		// add CORS support because in dev mode we usually run on a different port than the frontend
		config := cors.DefaultConfig()
		config.AllowAllOrigins = true
		config.AllowMethods = []string{"GET", "POST"}
		config.AllowHeaders = []string{"Content-Type", "Authorization"}
		config.ExposeHeaders = []string{"Content-Length"}
		config.AllowCredentials = false // no cookies
		config.MaxAge = 2 * time.Hour   // Chrome's limit
		s.engine.Use(cors.New(config))
	}

	s.initAPIv1()
}

// Run starts the server
func (s *Server) Run() {
	err := s.engine.Run(s.Bind)
	if err != nil {
		log.WithError(err).Error("gin failed")
	}
}
