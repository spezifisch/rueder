package api

import (
	"os"
	"testing"
	"time"

	"github.com/cockroachdb/copyist"
	"github.com/gobuffalo/pop/v6"
	"github.com/gofrs/uuid"
	"github.com/spezifisch/rueder3/backend/pkg/repository/pop/models"
	"github.com/stretchr/testify/assert"
)

// generated by a fair dice roll
var testUserID = uuid.FromStringOrNil("6ff0b898-e79a-48f8-bc14-4bb48018360f")
var nonExistentUserID = uuid.FromStringOrNil("d7dead07-8309-4893-8e3a-5eb1d41ada5c")
var nonExistentArticleID = uuid.FromStringOrNil("d7dead07-8309-4893-8e3a-5eb1d41ada5c")

func TestMain(m *testing.M) {
	// register copyist_postgres driver
	// pop is configured to use it in our included database.yml
	copyist.Register("postgres")

	configPath := "../../../../config"
	_ = pop.AddLookupPaths(configPath)

	// override CreatedAt and UpdatedAt timestamps to be reproducible
	fakeNow, _ := time.Parse(time.RFC3339, "2022-01-31T00:00:00Z")
	pop.SetNowFunc(func() time.Time { return fakeNow })

	// drop and recreate db with newest migrations when using the actual db
	if copyist.IsRecording() {
		setupTestDB()
	}

	os.Exit(m.Run())
}

func assertNoError(err error, msg string) {
	if err != nil {
		panic(msg)
	}
}

// setupTestDB is called from TestMain only in recording mode
func setupTestDB() {
	migrationPath := "../../../../migrations"

	// called from TestMain before copyist sessions can be opened,
	// therefore we need to connect directly to the db
	conn, err := pop.Connect("test_nocopyist")
	assertNoError(err, "connect")
	defer conn.Close()

	// recreate db
	_ = pop.DropDB(conn) // we don't care whether it exists
	err = pop.CreateDB(conn)
	assertNoError(err, "create db failed. did you forget to do 'docker-compose up db'?")

	// create tables
	mig, err := pop.NewFileMigrator(migrationPath, conn)
	assertNoError(err, "newMig")
	err = mig.Up()
	assertNoError(err, "migUp")
}

// firstRunTest has to be called from every test file which uses pop from the
// first test function. see https://github.com/cockroachdb/copyist/tree/ddb0fc0d6473275c46badcca58d6fbd47bebf4f5#troubleshooting
func firstRunTest(t *testing.T) {
	_, err := pop.Connect("test")
	assert.NoError(t, err, "firstRunTest connect")
}

// beforeEachTest has to be called from every test function after opening the
// copyist session (except for the one that calls firstRunTest()).
// it resets the db to a clean state.
func beforeEachTest(t *testing.T) {
	conn, err := pop.Connect("test")
	assert.NoError(t, err, "beforeEachTest connect")

	// delete content
	err = conn.TruncateAll()
	assert.NoError(t, err, "beforeEachTest truncate")

	// create user
	createUser(t, conn, testUserID)
}

func createUser(t *testing.T, pop *pop.Connection, userID uuid.UUID) {
	u := &models.User{
		ID: userID,
	}
	err := pop.Create(u)
	assert.NoError(t, err)
}
